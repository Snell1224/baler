#!/bin/sh
#
#
# balerd        This shell script takes care of starting and stopping
#               balerd (ovis log analysis daemon).
#
# chkconfig: - 98 0
# description: balerd is an ovis daemon.
#
### BEGIN INIT INFO
# Provides: balerd
# Required-Start:
# Defalt-Start: 2 3 4 5
# Default-Stop: 0 1 6
# Description: balerd init script
### END INIT INFO

# Source function library.
if [ -f /lib/lsb/init-functions ] ; then
	. /lib/lsb/init-functions
	STATUS=status_of_proc
fi

if [ -f /etc/init.d/functions ] ; then
	. /etc/init.d/functions
	STATUS=status
else
	echo_success() {
		echo 'success'
	}
	echo_failure() {
		echo 'failure'
	}
fi

prefix=@prefix@
. $(sysconfdir)/profile.d/set-ovis-variables.sh
. $(sysconfdir)/ovis/ovis-functions.sh

if [ -z $OVIS_HOME ]; then
	OVIS_HOME=@prefix@
	echo "OVIS_HOME not defined, using default of $OVIS_HOME"
fi

if [ ! -d $OVIS_HOME ]; then
	echo "OVIS_HOME: $OVIS_HOME is not a directory"
	exit 1
fi

if [ -z $OVIS_WEB_ROOT ]; then
    export OVIS_WEB_ROOT=$OVIS_HOME/ovis_web/
fi

####
# mkdir -p $OVIS_WEB_ROOT/baler2/store/
#
# CMD="balerd -l $OVIS_LOG/balerd.log -s $OVIS_WEB_ROOT/baler2/store -z 42001 $@"
#
####

RETVAL=0
prog="balerd"
BALER=$OVIS_HOME/bin/balerd
if [ -z $BALER_XPORT ] ; then
	BALER_XPORT=sock
	echo "BALER_XPORT not set using default of $BALER_XPORT"
fi

if [ -z $BALER_PORT_TO_OCMD ] ; then
	BALER_PORT_TO_OCMD=42001
	echo "BALER_PORT_TO_OCMD not set using default of $BALER_PORT_TO_OCMD"
fi

if [ -z $BALER_STORE ] ; then
	BALER_STORE=$OVIS_HOME/baler2/store/
	echo "BALER_STORE not set using default of $BALER_STORE"
fi
if [ ! -d $BALER_STORE ]; then
	echo "$BALER_STORE is not a directory"
	exit 1
fi

lockfile=$OVIS_HOME/var/lock/$prog.lock
pidfile=$OVIS_HOME/var/pid/$prog.pid

mkdir -p $(dirname $lockfile)
mkdir -p $(dirname $pidfile)
mkdir -p $OVIS_SOCK/
mkdir -p $OVIS_LOG/
LOG=$OVIS_LOG/balerd.log

start() {
	echo -n "Starting $prog: "
	# Check running instance
	pid=`get_pid $BALER`
	if [ $pid ] ; then
		echo -n "Balerd is already running: "
		echo_failure
		echo
		exit 1
	fi

	$BALER -l $LOG -s $BALER_STORE -z $BALER_PORT_TO_OCMD

	RETVAL=$?
	if [ $RETVAL -eq 0 ] ; then
		sleep 1;
		pid=`get_pid $BALER`
		if [ $pid ] && [ -d /proc/$pid ] ; then
			echo $pid > $pidfile
			echo_success
			echo
		else
			echo_failure
			echo
		fi
	else
		echo_failure
		echo
	fi
}

stop() {
	echo -n "Stopping $prog: "
	if [ -f $pidfile ]; then
		pid=`cat $pidfile`
	else
		echo "pidfile of $pidfile doesn't exists, using ps"
		pid=`get_pid $BALER`
	fi

	if [ ! $pid ]; then
		echo "Cannot obtain pid ..."
		echo_failure
		echo
		exit 1
	else
		kill $pid
	fi

	if ps -p $pid >/dev/null 2>&1 ; then
		echo_failure
	else
		echo_success
		rm -f $lockfile
		rm -f $pidfile
	fi
	echo
}

dostatus() {
	$STATUS -p $pidfile $BALER $prog
}

restart() {
	stop
	start
}
clean() {
	if checkpid `cat $pidfile` ; then
		echo "balerd running. stop balerd before cleaning"
	else
		echo "Cleaning $BALER_STORE/*"
		rm -rf $BALER_STORE/*
	fi
}

# See how we were called.
case "$1" in
  start)
	start
	;;
  stop)
	stop
	;;
  status)
	dostatus
	;;
  restart|reload)
	restart
	;;
  clean)
	clean
	;;
  *)
	echo "Usage: $0 {start|stop|status|restart|reload}"
	exit 3
esac

exit $RETVAL
